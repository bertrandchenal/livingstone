#! /usr/bin/env python3
import sys
from argparse import ArgumentParser

from config import ctx, connect
from models import Document, Keyword

def color(s, code):
    sys.stdout.write('\033[' + str(code) + 'm')
    sys.stdout.write(s + '\n')
    sys.stdout.write('\033[' + str(39) + 'm')

def red(s):
    color(s, 31)

def green(s):
    color(s, 32)

def blue(s):
    color(s, 34)

# Action allows to define "routes" names to functions
class Action:

    actions = {}

    def __init__(self, readonly=False):
        self.readonly = readonly

    def __call__(self, fn):
        name = fn.__name__
        self.actions[name] = self
        self.fn = fn
        return fn

    @classmethod
    def get(cls, name, default=None):
        return cls.actions.get(name, default)

    def launch(self, *args, **kwars):
        return self.fn(*args, **kwars)

@Action(readonly=True)
def search(words):
    for uri, match in Document.search(words):
        print(uri)
        blue("-> %s" % match)

@Action(readonly=True)
def neighbours(words):
    for res in Keyword.neighbours(words):
        print(res)

@Action(readonly=True)
def suggest(words):
    for word in words:
        for res in Keyword.suggest(word):
            print(res)

@Action()
def load(files):
    for f in files:
        Document.load_file(f)

@Action()
def crawl(args):
    Document.crawl()

def main():
    parser = ArgumentParser(description='Livingstone is a personal search engine')
    parser.add_argument('action', nargs='+', help='action (load, search)')
    parser.add_argument('--page', '-p', action='count', help='Go to page',
                        default=0)
    parser.add_argument('--length', '-l', type=int,
                        help='Page length (default: 10)', default=10)
    parser.add_argument(
        '--encoding', '-e', help='Define encoding (default: utf-8',
        default='utf-8',
    )

    args = vars(parser.parse_args())
    ctx.update(args)

    action = Action.get(args['action'][0])
    ctx.readonly = action.readonly
    with connect('.lvn.db'):
        action.launch(args['action'][1:])

if __name__ == '__main__':
    main()
